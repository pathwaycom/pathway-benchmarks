version: "3.8"
services:
  zookeeper:
    cpuset: $HARNESS_CPU_SET
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 10s
      retries: 100
  kafka:
    cpuset: $HARNESS_CPU_SET
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_PORT}:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      DOCKER_API_VERSION: 1.22
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test_0:$KAFKA_INPUT_TOPIC_PARTITIONS:1:delete,test_1:1:1:delete"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_CLEANER_MIN_COMPACTION_LAG_MS: 1000000000
      KAFKA_LOG_SEGMENT_MS: 10000
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: LogAppendTime
      KAFKA_MIN_CLEANABLE_DIRTY_RATIO: 1
      KAFKA_FETCH_MAX_WAIT_MS: 10
      KAFKA_METADATA_MAX_AGE_MS: 10
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 10s
      retries: 100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  streamer:
    cpuset: $HARNESS_CPU_SET
    build: ../services/streamer/
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - RATE_PER_SECOND
      - DATASET_WARMUP_PREFIX_LENGTH
      - STREAMER_WAIT_TIME_MS
      - STREAMER_EMIT_INTERVAL_MS
    depends_on:
      kafka:
        condition: service_healthy
 
  stats-collector:
    cpuset: $HARNESS_CPU_SET
    build:
      context: ../services/stats-collector/
      dockerfile: Dockerfile
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - ENGINE_TYPE
      - RATE_PER_SECOND
      - CORES
      - WORKERS
      - STATS_SHORT
      - STATS_TIMELINE
      - STATS_PATHWAY_PTIME_AGGREGATED
      - DATASET_WARMUP_PREFIX_LENGTH
      - STATS_TIME_AGGREGATED
      - DICT_SIZE
      - RECORDED_DATASET_SIZE
      - STREAMER_WAIT_TIME_MS
      - CODE_VERSION 
 
    depends_on:
      streamer:
        condition: service_completed_successfully
    volumes:
      - "./results:/stats-collector/results"

  pathway-all:
    cpuset: $TESTED_CPU_SET
    build:
      context: ../
      dockerfile: ./services/pathway-all/Dockerfile
    deploy:
      resources:
        limits:
          memory: 32G
    cap_add:
      - SYS_PTRACE
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - RATE_PER_SECOND
      - CORES
      - WORKERS
      - PATHWAY_YOLO_RARE_WAKEUPS
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - "./results:/pathway-all/results"

